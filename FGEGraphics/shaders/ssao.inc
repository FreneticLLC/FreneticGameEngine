//
// This file is part of the Frenetic Game Engine, created by Frenetic LLC.
// This code is Copyright (C) Frenetic LLC under the terms of a strict license.
// See README.md or LICENSE.txt in the FreneticGameEngine source root for the contents of the license.
// If neither of these are available, assume that neither you nor anyone other than the copyright holder
// hold any right or permission to use this software until such time as the official license is identified.
//

/*
GENERATION CODE (C#):
            Random random = new Random();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < 32; i++)
            {
                double x = random.NextDouble() * 2.0 - 1.0;
                double y = random.NextDouble() * 2.0 - 1.0;
                double len = Math.Sqrt(x * x + y * y);
                sb.Append("vec2(" + (x / len) + ", " + (y / len) + "),\n");
            }
            File.WriteAllText("result.txt", sb.ToString());
*/
const vec2 noise[] = vec2[](
	vec2(0.816974284739033, -0.576674100402598),
	vec2(0.726527722388351, -0.687137154141147),
	vec2(-0.633311138034394, 0.773897281583015),
	vec2(-0.443630264109363, -0.896209902180431),
	vec2(0.925432831843231, 0.378911696502785),
	vec2(0.551369783597202, 0.834260967405268),
	vec2(0.357093278167287, -0.934068729102811),
	vec2(0.319371548819065, -0.947629576261163),
	vec2(-0.110968827538699, 0.993823887474379),
	vec2(0.516974131799351, 0.856001020472702),
	vec2(0.220619936417185, 0.975359853415793),
	vec2(-0.931004527808018, 0.365007628962696),
	vec2(-0.365920837144818, 0.930645980458324),
	vec2(0.994247847201261, 0.107103773676084),
	vec2(-0.812731166179419, -0.582638868872169),
	vec2(0.995906607516348, -0.0903882133094731),
	vec2(0.962474928685528, -0.271370616780423),
	vec2(-0.990446745041369, -0.137895776719076),
	vec2(0.88888643791026, -0.458127602856681),
	vec2(0.741624968602105, -0.670814732952345),
	vec2(0.809174192721238, 0.587568826465405),
	vec2(-0.912090905233409, -0.409988024935485),
	vec2(-0.87259311134526, -0.48844780891391),
	vec2(0.479846950737638, 0.877352211980907),
	vec2(0.607808857406633, 0.794083366440856),
	vec2(-0.338430704197075, 0.940991316886969),
	vec2(0.226678350490074, 0.973969673767669),
	vec2(0.682856659211184, -0.730552382085597),
	vec2(-0.897770025920797, -0.440464505446434),
	vec2(0.655363709131766, -0.755313450663401),
	vec2(-0.64597373980502, 0.763359631813418),
	vec2(0.998062361689854, -0.0622215571813358)
);

/*
GENERATION CODE(C#):

            Random random = nw Random();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < 64; i++)
            {
                double x = random.NextDouble() * 2.0 - 1.0;
                double y = random.NextDouble() * 2.0 - 1.0;
                double z = random.NextDouble();
                double len = Math.Sqrt(x * x + y * y + z * z);
                sb.Append("vec3(" + (x / len) + ", " + (y / len) + ", " + (z / len) + "),\n");
            }
            File.WriteAllText("result.txt", sb.ToString());
*/
const vec3 kernel[] = vec3[](
	vec3(0.50523790717783, 0.638495093231913, 0.580567543933811),
	vec3(0.591922892679008, -0.0393588399305392, 0.805033024690191),
	vec3(-0.0269829191557532, 0.806235548218982, 0.59097898681922),
	vec3(-0.749335223414985, 0.350483386515607, 0.561834600862359),
	vec3(0.805247035459988, -0.218806569862496, 0.55109064305966),
	vec3(-0.317110752787967, 0.919712533761122, 0.231451130282283),
	vec3(0.663635679797808, 0.468138701855306, 0.58346708589648),
	vec3(-0.17992278720326, 0.0804220867970362, 0.980387718507438),
	vec3(0.202675089221641, -0.87670512272559, 0.436246416599274),
	vec3(0.37757821445279, -0.586869211202515, 0.716253600977461),
	vec3(-0.889925291076573, 0.300957513395599, 0.34272080682826),
	vec3(-0.147704495244744, -0.440612951222886, 0.885462370346225),
	vec3(0.865252867579653, -0.0137069085989239, 0.501148277261179),
	vec3(-0.529711815582452, 0.833450303389426, 0.157372120187839),
	vec3(-0.564959327589597, -0.179847464138838, 0.805279981008059),
	vec3(0.497943313749438, 0.639742798749804, 0.585475539830655),
	vec3(0.189072239743947, 0.611038026357689, 0.768689936517389),
	vec3(-0.534489745280417, 0.736504836522392, 0.41458574260242),
	vec3(-0.870493063648821, -0.0863019146101891, 0.48455526586129),
	vec3(-0.662022530327602, -0.695014464956345, 0.280501448909066),
	vec3(-0.067887160253829, 0.712081049665431, 0.698807492933532),
	vec3(0.809837343882758, 0.576391976045415, 0.109250933192271),
	vec3(-0.365901548118161, 0.0114901260686164, 0.930582631520522),
	vec3(0.339857468567267, -0.403445530075345, 0.849546117242186),
	vec3(0.406544571037622, 0.29297426698646, 0.865382915618042),
	vec3(0.49098514549523, -0.85232403152985, 0.180214683585247),
	vec3(0.785505315730742, 0.507278963699669, 0.354470664437182),
	vec3(0.0325130731131695, -0.91143939203003, 0.410147698680205),
	vec3(0.380229451685504, 0.68164587542891, 0.625127558648389),
	vec3(0.664499021198278, -0.274883163411749, 0.694895889539779),
	vec3(0.0107509418865127, 0.846902019327788, 0.531640279613075),
	vec3(-0.567721851169424, 0.822970414553638, 0.0202878405498193),
	vec3(-0.0234283738202667, -0.615716742292373, 0.78761920022369),
	vec3(0.586357088509774, -0.506857716621407, 0.631886556159945),
	vec3(0.196002449853212, -0.886491221211885, 0.419185346077127),
	vec3(-0.831265689142906, 0.365610233135833, 0.418720087266102),
	vec3(-0.704159643832156, -0.41047940375318, 0.579366770787388),
	vec3(-0.465293997405335, -0.502660397665097, 0.728583571457476),
	vec3(0.552382532148862, 0.635406508241915, 0.539566592239206),
	vec3(-0.444021297897998, -0.498047966610255, 0.744844487103427),
	vec3(-0.825585279789057, 0.427895551425575, 0.367850979155728),
	vec3(-0.313894302561715, -0.737422015797692, 0.598062820643586),
	vec3(-0.552761080495518, -0.103988775577333, 0.826826174261165),
	vec3(0.623025069317336, -0.445913654382964, 0.642651364144634),
	vec3(0.0738222610921289, -0.831313104756351, 0.550880019266992),
	vec3(0.734195594997187, 0.677758042864879, 0.0400107937773642),
	vec3(0.884609956220488, -0.261371634669868, 0.386199551974867),
	vec3(0.343401584411166, 0.0544684486782016, 0.937607881751477),
	vec3(0.152621797092288, -0.864705167030252, 0.478530627194858),
	vec3(0.589615543897804, -0.201666649782541, 0.782102341614947),
	vec3(-0.71611924815832, -0.692096453021359, 0.0904196999133216),
	vec3(0.464374466413936, -0.301491682272031, 0.832741929089411),
	vec3(-0.453421566341103, -0.387673257650842, 0.802569827790183),
	vec3(0.668400548429906, -0.734478886078198, 0.117394517605934),
	vec3(-0.806421658704416, -0.385546487098633, 0.448372629247506),
	vec3(-0.538595551360479, 0.821711110813931, 0.186294611891051),
	vec3(-0.700220511420765, 0.712997016918229, 0.0364210001420711),
	vec3(0.433274981814638, -0.385996269642977, 0.814419836420523),
	vec3(0.0248614781788934, 0.977242817870262, 0.210661771149279),
	vec3(-0.441040550660678, 0.440650562668534, 0.781863360372406),
	vec3(-0.900950545362814, -0.419549668078104, 0.110752836649903),
	vec3(0.695041214521007, 0.305860345361649, 0.650666703660497),
	vec3(0.59493702123171, 0.49059534729015, 0.636683709533389),
	vec3(0.396957020675991, 0.489798609358311, 0.776223193422295)
);

const float ssao_radius = 0.025; // TODO: Uniform?

float ssao_color(in vec3 position, in vec3 normal, vec3 difcol)
{
	float pos_zm = linearizeDepth(texture(depthtex, f.texcoord).x);
	vec3 rv = vec3(noise[int(dot(position, position) + dot(difcol, difcol) * 17.32 + pos_zm * 72.8) % 32], 0.0);
	vec3 tangent = normalize(rv - normal * dot(rv, normal));
	vec3 bitangent = cross(normal, tangent);
	mat3 tbn = mat3(tangent, bitangent, normal);
	float occlusion = 0.0;
	if (pos_zm < 0.99)
	{
		for (int i = 0; i < 64; i++) {
			vec3 vsample = tbn * kernel[i];
			vsample = vsample * ssao_radius + position;
			vec4 offset = ssao_projection * vec4(vsample, 1.0);
			offset.xyz /= offset.w;
			offset.xyz = offset.xyz * 0.5 + 0.5;
			float sampleDepth = linearizeDepth(texture(depthtex, offset.xy).x);
			float rangeCheck = abs(pos_zm - sampleDepth) < ssao_radius ? 1.0 : 0.0;
			occlusion += (sampleDepth <= linearizeDepth(offset.z) ? 1.0 : 0.0) * rangeCheck;
		}
	}
	return 1.0 - (occlusion * (0.5 / 64.0));
}
