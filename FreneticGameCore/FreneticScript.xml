<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FreneticScript</name>
    </assembly>
    <members>
        <member name="T:FreneticScript.CommandSystem.AbstractCommand">
            <summary>
            The base for a command.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.Name">
            <summary>
            The name of the command.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.CommandSystem">
            <summary>
            The system that owns this command.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.Arguments">
            <summary>
            A short explanation of the arguments of the command.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.Description">
            <summary>
            A short explanation of what the command does.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.IsDebug">
            <summary>
            Whether the command is for debugging purposes.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.IsBreakable">
            <summary>
            Whether the 'break' command can be used on this command.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.IsFlow">
            <summary>
            Whether the command is part of a script's flow rather than for normal client use.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.Waitable">
            <summary>
            Whether the command can be &amp;waited on.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.Asyncable">
            <summary>
            Whether the command can be run off the primary tick.
            NOTE: These mostly have yet to be confirmed! They are purely theoretical!
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.MinimumArguments">
            <summary>
            How many arguments the command can have minimum.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.MaximumArguments">
            <summary>
            How many arguments the command can have maximum.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.AbstractCommand.ObjectTypes">
            <summary>
            The expected object type getters for a command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.AbstractCommand.TestForValidity(FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Tests if the CommandEntry is valid for this command at pre-process time.
            </summary>
            <param name="entry">The entry to test</param>
            <returns>An error message (with tags), or null for none.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.AbstractCommand.GetFollower(FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Gets the follower (callback) entry for an entry.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.AbstractCommand.AdaptToCIL(FreneticScript.CommandSystem.CILAdaptationValues,System.Int32)">
            <summary>
            Adapts a command entry to CIL.
            </summary>
            <param name="values">The adaptation-relevant values.</param>
            <param name="entry">The present entry ID.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.AbstractCommand.PreAdaptToCIL(FreneticScript.CommandSystem.CILAdaptationValues,System.Int32)">
            <summary>
            Prepares to adapt a command entry to CIL.
            </summary>
            <param name="values">The adaptation-relevant values.</param>
            <param name="entry">The present entry ID.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.AbstractCommand.AdaptBlockFollowers(FreneticScript.CommandSystem.CommandEntry,System.Collections.Generic.List{FreneticScript.CommandSystem.CommandEntry},System.Collections.Generic.List{FreneticScript.CommandSystem.CommandEntry})">
            <summary>
            Adjust list of commands that formed by an inner block.
            </summary>
            <param name="entry">The producing entry.</param>
            <param name="input">The block of commands.</param>
            <param name="fblock">The final block to add to the entry.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.AbstractCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.AbstractCommand.ShowUsage(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry,System.Boolean)">
            <summary>
            Displays the usage information on a command to the console.
            </summary>
            <param name="queue">The associated queue.</param>
            <param name="entry">The CommandEntry data to show usage help to.</param>
            <param name="doError">Whether to end with an error.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.CILAdaptationValues">
            <summary>
            Holds all data needed for CIL adaptation.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.Entry">
            <summary>
            The compiled CSE involved.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.Script">
            <summary>
            The compiling script.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.EntryField">
            <summary>
            Represents the field "CSEntry" in the class CompiledCommandRunnable.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.EntriesField">
            <summary>
            Represents the field "Entries" in the class CommandStackEntry.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.Entry_CommandField">
            <summary>
            Represents the field "Command" in the class CommandEntry.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.Entry_GetArgumentObjectMethod">
            <summary>
            Represents the field "GetArgumentObject" in the class CommandEntry.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.IntHolder_InternalField">
            <summary>
            Represents the field "Internal" in the class IntHolder.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.ExecuteMethod">
            <summary>
            Represents the "Execute(queue, entry)" method.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.Queue_SetLocalVarMethod">
            <summary>
            Represents the "SetLocalVar(c, value)" method in the class CommandQueue.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.CommandEntryType">
            <summary>
            The type of the class CommandEntry.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.ILGen">
            <summary>
            The IL code generator.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.Method">
            <summary>
            The method being constructed.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CILAdaptationValues.LocalVariableLocation(System.String)">
            <summary>
            Returns the location of a local variable's name.
            </summary>
            <param name="name">The name.</param>
            <returns>The location.</returns>
        </member>
        <member name="F:FreneticScript.CommandSystem.CILAdaptationValues.LVariables">
            <summary>
            A map of local variables to track.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CILAdaptationValues.LoadEntry(System.Int32)">
            <summary>
            Load the entry onto the stack.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CILAdaptationValues.LoadQueue">
            <summary>
            Load the queue variable onto the stack.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CILAdaptationValues.MarkCommand(System.Int32)">
            <summary>
            Marks the command as the correct entry. Should be called with every command!
            </summary>
            <param name="entry">The entry location.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CILAdaptationValues.PrepareExecutionCall(System.Int32)">
            <summary>
            Loads the command, the entry, and the queue, for calling an execution function.
            </summary>
            <param name="entry">The entry location.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CILAdaptationValues.CallExecute(System.Int32)">
            <summary>
            Call the "Execute(queue, entry)" method with appropriate parameters.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.AbstractCommandEntryData">
            <summary>
            The data held by a command.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.Arguments.Argument">
            <summary>
            An Argument in the command system.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Arguments.Argument.Bits">
            <summary>
            The parts that build up the argument.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Arguments.Argument.WasQuoted">
            <summary>
            Whether the argument was input with "quotes" around it.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Arguments.Argument.Parse(System.String,System.Collections.Generic.Dictionary{System.String,FreneticScript.CommandSystem.ObjectHolder},FreneticScript.CommandSystem.DebugMode,System.Action{System.String},FreneticScript.CommandSystem.CommandStackEntry)">
            <summary>
            Parse the argument, reading any tags or other special data.
            </summary>
            <param name="base_color">The base color for color tags.</param>
            <param name="vars">The variables for var tags.</param>
            <param name="mode">The debug mode to use when parsing tags.</param>
            <param name="error">What to invoke if there is an error.</param>
            <param name="cse">The relevant command stack entry, if any.</param>
            <returns>The parsed final text.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.Arguments.Argument.ToString">
            <summary>
            Returns the argument as plain input text.
            </summary>
            <returns>The plain input text.</returns>
        </member>
        <member name="T:FreneticScript.CommandSystem.Arguments.ArgumentBit">
            <summary>
            Part of an Argument, abstract.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Arguments.ArgumentBit.CommandSystem">
            <summary>
            The relevant command system.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Arguments.ArgumentBit.Parse(System.String,System.Collections.Generic.Dictionary{System.String,FreneticScript.CommandSystem.ObjectHolder},FreneticScript.CommandSystem.DebugMode,System.Action{System.String},FreneticScript.CommandSystem.CommandStackEntry)">
            <summary>
            Parse the argument part, reading any tags or other special data.
            </summary>
            <param name="base_color">The base color for color tags.</param>
            <param name="vars">The variables for var tags.</param>
            <param name="mode">The debug mode to use when parsing tags.</param>
            <param name="error">What to invoke if there is an error.</param>
            <param name="cse">The relevant command stack entry, if any.</param>
            <returns>The parsed final text.</returns>
        </member>
        <member name="T:FreneticScript.CommandSystem.Arguments.TagArgumentBit">
            <summary>
            Part of an argument that contains tags.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Arguments.TagArgumentBit.Bits">
            <summary>
            The pieces that make up the tag.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Arguments.TagArgumentBit.#ctor(FreneticScript.CommandSystem.Commands,FreneticScript.TagHandlers.TagBit[])">
            <summary>
            Constructs a TagArgumentBit.
            </summary>
            <param name="system">The relevant command system.</param>
            <param name="bits">The tag bits.</param>
        </member>
        <member name="F:FreneticScript.CommandSystem.Arguments.TagArgumentBit.Fallback">
            <summary>
            The tag to fall back on if this tag fails.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Arguments.TagArgumentBit.Start">
            <summary>
            The starting point for this tag.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Arguments.TagArgumentBit.Parse(System.String,System.Collections.Generic.Dictionary{System.String,FreneticScript.CommandSystem.ObjectHolder},FreneticScript.CommandSystem.DebugMode,System.Action{System.String},FreneticScript.CommandSystem.CommandStackEntry)">
            <summary>
            Parse the argument part, reading any tags.
            </summary>
            <param name="base_color">The base color for color tags.</param>
            <param name="vars">The variables for var tags.</param>
            <param name="mode">The debug mode to use when parsing tags.</param>
            <param name="error">What to invoke if there is an error.</param>
            <param name="cse">The relevant command stack entry, if any.</param>
            <returns>The parsed final text.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.Arguments.TagArgumentBit.ToString">
            <summary>
            Returns the tag as tag input text.
            </summary>
            <returns>Tag input text.</returns>
        </member>
        <member name="T:FreneticScript.CommandSystem.Arguments.TextArgumentBit">
            <summary>
            An argument part containing only plain text.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Arguments.TextArgumentBit.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs the argument with input text.
            </summary>
            <param name="_text">The input text.</param>
            <param name="wasquoted">Whether the argument was quoted at input time.</param>
        </member>
        <member name="F:FreneticScript.CommandSystem.Arguments.TextArgumentBit.InputValue">
            <summary>
            The input text.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Arguments.TextArgumentBit.Parse(System.String,System.Collections.Generic.Dictionary{System.String,FreneticScript.CommandSystem.ObjectHolder},FreneticScript.CommandSystem.DebugMode,System.Action{System.String},FreneticScript.CommandSystem.CommandStackEntry)">
            <summary>
            Returns the input text.
            </summary>
            <param name="base_color">The base color for color tags.</param>
            <param name="vars">The variables for var tags.</param>
            <param name="mode">The debug mode to use when parsing tags.</param>
            <param name="error">What to invoke if there is an error.</param>
            <param name="cse">The relevant command stack entry, if any.</param>
            <returns>The parsed final text.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.Arguments.TextArgumentBit.ToString">
            <summary>
            Returns the input text.
            </summary>
            <returns>The input text.</returns>
        </member>
        <member name="T:FreneticScript.CommandSystem.CommandEntry">
            <summary>
            All the information for a command being currently run.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.FromInput(System.String,FreneticScript.CommandSystem.Commands,System.String,System.Int32,System.String)">
            <summary>
            Creates a CommandEntry from the given input and queue information.
            </summary>
            <param name="command">The command line text itself.</param>
            <param name="system">The command system to work from.</param>
            <param name="script">The name of the creating script.</param>
            <param name="line">The line in the creating script.</param>
            <param name="tabs">How much tabulation tihs command had.</param>
            <returns>The command system.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.CreateErrorOutput(System.String,FreneticScript.CommandSystem.Commands,System.String,System.String)">
            <summary>
            Create an entry that represents an error message.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.CreateInvalidOutput(System.String,System.Collections.Generic.List{FreneticScript.CommandSystem.Arguments.Argument},FreneticScript.CommandSystem.Commands,System.String,System.Int32,System.Boolean,System.String,System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,FreneticScript.CommandSystem.Arguments.Argument},FreneticScript.CommandSystem.Commands)">
            <summary>
            Create an entry that represents invalid output.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.System">
            <summary>
            The system controlling this CommandEntry.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.OwnIndex">
            <summary>
            The index of this entry in its block.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.CommandLine">
            <summary>
            The original command input.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.InnerCommandBlock">
            <summary>
            A list of all commands that were inside this command originally.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.NamedArguments">
            <summary>
            All 'named' arguments on this command entry.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.BlockStart">
            <summary>
            The start of this command's braced block.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.BlockEnd">
            <summary>
            The end of this command's braced block.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.WaitFor">
            <summary>
            Whether the &amp;waitable command entry should be waited for.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.ScriptName">
            <summary>
            The name of the creating script.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.ScriptLine">
            <summary>
            The line number in the creating script.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.BlockScript">
            <summary>
            The inner command block as its own script, generated by commands execute methods where needed.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.#ctor(System.String,System.Int32,System.Int32,FreneticScript.CommandSystem.AbstractCommand,System.Collections.Generic.List{FreneticScript.CommandSystem.Arguments.Argument},System.String,System.Int32,System.String,System.Int32,System.String,FreneticScript.CommandSystem.Commands)">
            <summary>
            Full constructor, recommended.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.#ctor(System.String,System.Int32,System.Int32,FreneticScript.CommandSystem.AbstractCommand,System.Collections.Generic.List{FreneticScript.CommandSystem.Arguments.Argument},System.String,System.Int32,System.String,System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,FreneticScript.CommandSystem.Arguments.Argument},FreneticScript.CommandSystem.Commands)">
            <summary>
            Full constructor, recommended.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.#ctor">
            <summary>
            Use at own risk.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.FullString">
            <summary>
            Gets the full command string that represents this command.
            </summary>
            <returns>The full command string.</returns>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.FairTabulation">
            <summary>
            Space to include in front of this tab when outputting it as text.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.Name">
            <summary>
            The command name input by the user.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.Command">
            <summary>
            The command that should execute this input.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.Arguments">
            <summary>
            The arguments input by the user.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEntry.Marker">
            <summary>
            What marker was used. 0 = none, 1 = +, 2 = -, 3 = !
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.GetNamedArgumentObject(FreneticScript.CommandSystem.CommandQueue,System.String)">
            <summary>
            Gets a named argument with a specified name, handling any tags.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="name">The argument name.</param>
            <returns>The parsed argument.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.GetArgumentObject(FreneticScript.CommandSystem.CommandQueue,System.Int32)">
            <summary>
            Gets an argument at a specified place, handling any tags.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="place">The argument place number.</param>
            <returns>The parsed argument.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.GetArgument(FreneticScript.CommandSystem.CommandQueue,System.Int32)">
            <summary>
            Gets an argument at a specified place, handling any tags - returning a string.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="place">The argument place number.</param>
            <returns>The parsed argument as a string.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.AllArguments(FreneticScript.CommandSystem.CommandQueue,System.Int32)">
            <summary>
            Gets all arguments piled together into a string.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="index">The index to start at.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.AllOriginalArguments(System.Int32)">
            <summary>
            Gets all arguments (without parsing) piled together into a string.
            </summary>
            <param name="index">The index to start at.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.Info(FreneticScript.CommandSystem.CommandQueue,System.String)">
            <summary>
            Used to output requested information.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="text">The text to output, with tags included.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.Good(FreneticScript.CommandSystem.CommandQueue,System.String)">
            <summary>
            Used to output a success message.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="text">The text to output, with tags included.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.SetData(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.AbstractCommandEntryData)">
            <summary>
            Gets the data associated with this entry in the queue.
            </summary>
            <param name="queue">The queue holding the data.</param>
            <param name="x">The data to set to.</param>
            <returns>The entry data.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.GetData(FreneticScript.CommandSystem.CommandQueue)">
            <summary>
            Gets the data associated with this entry in the queue.
            </summary>
            <param name="queue">The queue holding the data.</param>
            <returns>The entry data.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.ShouldShowGood(FreneticScript.CommandSystem.CommandQueue)">
            <summary>
            Returns whether commands should output 'good' results.
            </summary>
            <returns>Whether commands should output 'good' results.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.Bad(FreneticScript.CommandSystem.CommandQueue,System.String)">
            <summary>
            Used to output a failure message. This is considered a 'warning' and will not induce an error.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="text">The text to output, with tags included.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEntry.Duplicate">
            <summary>
            Perfectly duplicates the command entry.
            </summary>
            <returns>The duplicate entry.</returns>
        </member>
        <member name="T:FreneticScript.CommandSystem.CommandEvents.ScriptRanPreScriptEvent">
            <summary>
            ScriptRanPreEvent, called by the run command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanPreScriptEvent.#ctor(FreneticScript.CommandSystem.Commands)">
            <summary>
            Constructs the ScriptRan script event.
            </summary>
            <param name="system">The relevant command system.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanPreScriptEvent.RegisterPriority(System.Int32)">
            <summary>
            Register a specific priority with the underlying event.
            </summary>
            <param name="prio">The priority.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanPreScriptEvent.DeregisterPriority(System.Int32)">
            <summary>
            Deregister a specific priority with the underlying event.
            </summary>
            <param name="prio">The priority.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanPreScriptEvent.Run(System.Int32,FreneticScript.CommandSystem.QueueCmds.ScriptRanPreEventArgs)">
            <summary>
            Runs the script event with the given input.
            </summary>
            <param name="prio">The priority to run with.</param>
            <param name="oevt">The details of the script to be ran.</param>
            <returns>The event details after firing.</returns>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEvents.ScriptRanPreScriptEvent.ScriptName">
            <summary>
            The name of the script being ran.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanPreScriptEvent.GetVariables">
            <summary>
            Get all variables according the script event's current values.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.CommandEvents.ScriptRanPostScriptEvent">
            <summary>
            ScriptRanPostEvent, called by the run command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanPostScriptEvent.#ctor(FreneticScript.CommandSystem.Commands)">
            <summary>
            Constructs the ScriptRan script event.
            </summary>
            <param name="system">The relevant command system.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanPostScriptEvent.RegisterPriority(System.Int32)">
            <summary>
            Register a specific priority with the underlying event.
            </summary>
            <param name="prio">The priority.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanPostScriptEvent.DeregisterPriority(System.Int32)">
            <summary>
            Deregister a specific priority with the underlying event.
            </summary>
            <param name="prio">The priority.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanPostScriptEvent.Run(System.Int32,FreneticScript.CommandSystem.QueueCmds.ScriptRanPostEventArgs)">
            <summary>
            Runs the script event with the given input.
            </summary>
            <param name="prio">The priority to run with.</param>
            <param name="oevt">The details to the script that was ran.</param>
            <returns>The event details after firing.</returns>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEvents.ScriptRanPostScriptEvent.ScriptName">
            <summary>
            The name of the script being ran.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanPostScriptEvent.GetVariables">
            <summary>
            Get all variables according the script event's current values.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.CommandEvents.ScriptRanScriptEvent">
            <summary>
            ScriptRanPreEvent, called by the run command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanScriptEvent.#ctor(FreneticScript.CommandSystem.Commands)">
            <summary>
            Constructs the ScriptRan script event.
            </summary>
            <param name="system">The relevant command system.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanScriptEvent.RegisterPriority(System.Int32)">
            <summary>
            Register a specific priority with the underlying event.
            </summary>
            <param name="prio">The priority.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanScriptEvent.DeregisterPriority(System.Int32)">
            <summary>
            Deregister a specific priority with the underlying event.
            </summary>
            <param name="prio">The priority.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanScriptEvent.Run(System.Int32,FreneticScript.CommandSystem.QueueCmds.ScriptRanEventArgs)">
            <summary>
            Runs the script event with the given input.
            </summary>
            <param name="prio">The priority to run with.</param>
            <param name="oevt">The details of the script to be ran.</param>
            <returns>The event details after firing.</returns>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandEvents.ScriptRanScriptEvent.ScriptName">
            <summary>
            The name of the script being ran.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandEvents.ScriptRanScriptEvent.GetVariables">
            <summary>
            Get all variables according the script event's current values.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.CommandQueue">
            <summary>
            Represents a set of commands to be run, and related information.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.CommandStack">
            <summary>
            The current stack of all command execution data.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.CurrentEntry">
            <summary>
            The current stack entry being used.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.Delayable">
            <summary>
            Whether the queue can be delayed (EG, via a WAIT command).
            Almost always true.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.Wait">
            <summary>
            How long until the queue may continue.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.Running">
            <summary>
            Whether the queue is running.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.CommandSystem">
            <summary>
            The command system running this queue.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.Script">
            <summary>
            The script that was used to build this queue.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.ParseTags">
            <summary>
            Whether commands in the queue will parse tags.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.Outputsystem">
            <summary>
            What function to invoke when output is generated.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandQueue.#ctor(FreneticScript.CommandSystem.CommandScript,FreneticScript.CommandSystem.Commands)">
            <summary>
            Constructs a new CommandQueue - generally kept to the FreneticScript internals.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.Complete">
            <summary>
            Called when the queue is completed.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandQueue.Execute">
            <summary>
            Starts running the command queue.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandQueue.Tick(System.Single)">
            <summary>
            Recalculates and advances the command queue.
            <param name="Delta">The time that passed this tick.</param>
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.LowestVariables">
            <summary>
            The variables that ran on the lowest level of this queue.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueue.WaitingOn">
            <summary>
            Whether this Queue is waiting on the last command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandQueue.HandleError(FreneticScript.CommandSystem.CommandEntry,System.String)">
            <summary>
            Handles an error as appropriate to the situation, in the current queue, from the current command.
            </summary>
            <param name="entry">The command entry that errored.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandQueue.GetCommand(System.Int32)">
            <summary>
            Gets the command at the specified index.
            </summary>
            <param name="index">The index of the command.</param>
            <returns>The specified command.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandQueue.Stop">
            <summary>
            Immediately stops the Command Queue by jumping to the end.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandQueue.SetVariable(System.String,FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Adds or sets a variable for tags in this queue to use.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value to set on the variable.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandQueue.GetVariable(System.String)">
            <summary>
            Gets the value of a variable saved on the queue.
            </summary>
            <param name="name">The name of the variable.</param>
            <returns>The variable's value.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandQueue.SetLocalVar(System.Int32,FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Sets a compiled stack entry's local variable.
            </summary>
            <param name="c">The location.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.ObjectHolder">
            <summary>
            Holds an object.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.ObjectHolder.Internal">
            <summary>
            The held object.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.DebugMode">
            <summary>
            An enumerattion of the possible debug modes a queue can have.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.DebugMode.FULL">
            <summary>
            Debug everything.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.DebugMode.MINIMAL">
            <summary>
            Only debug errors.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.DebugMode.NONE">
            <summary>
            Debug nothing.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.TagParseMode">
            <summary>
            What mode of parsing a Queue uses.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.TagParseMode.OFF">
            <summary>
            Parsing entirely disabled.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.TagParseMode.ON">
            <summary>
            Parsing enabled in standard tag-syntax mode.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.CommandQueueEventArgs">
            <summary>
            Represents a command queue when used in an event.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandQueueEventArgs.Queue">
            <summary>
            The relevant queue.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandQueueEventArgs.#ctor(FreneticScript.CommandSystem.CommandQueue)">
            <summary>
            Constructs the event args.
            </summary>
            <param name="queue">The relevant queue.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.Commands">
            <summary>
            Handles all FreneticScript command systems. The entry point to FreneticScript.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.RegisteredCommands">
            <summary>
            A full dictionary of all registered commands.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.RegisteredCommandList">
            <summary>
            A full list of all registered commands.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.Queues">
            <summary>
            All command queues currently running.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.TagSystem">
            <summary>
            The tag handling system.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.Output">
            <summary>
            The output system.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.DebugInvalidCommand">
            <summary>
            The AbstractCommand for the invalid command-command.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.DebugVarSetCommand">
            <summary>
            The AbstractCommand for the var-set command.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.Functions">
            <summary>
            All functions this command system has loaded.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.Events">
            <summary>
            All script events this command system is aware of.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.OnceBlocks">
            <summary>
            All known identifiers for the 'once' block command.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.random">
            <summary>
            A random number generator.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.Reload">
            <summary>
            Reloads the entire command system.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.ExecuteScript(FreneticScript.CommandSystem.CommandScript,System.Collections.Generic.Dictionary{System.String,FreneticScript.CommandSystem.ObjectHolder}@,FreneticScript.CommandSystem.CommandQueue@,FreneticScript.CommandSystem.DebugMode)">
            <summary>
            Executes a command script.
            Returns the determined value(s).
            </summary>
            <param name="script">The script to execute.</param>
            <param name="Variables">What variables to add to the commandqueue.</param>
            <param name="queue">Outputs the generated queue (already ran or running).</param>
            <param name="mode">The debug mode to run it in.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.GetScript(System.String)">
            <summary>
            Gets a script saved in the command system by name, or creates one from file.
            </summary>
            <param name="script">The name of the script.</param>
            <returns>A script, or null if there's no match.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.GetFunction(System.String)">
            <summary>
            Gets a function saved in the command system by name.
            </summary>
            <param name="script">The name of the script.</param>
            <returns>A script, or null if there's no match.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.PrecalcScript(System.String,System.String)">
            <summary>
            Precalculates a script file to potentially be run.
            </summary>
            <param name="name">The name of the script.</param>
            <param name="script">The script to run.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.RunPrecalculated">
            <summary>
            Runs any precalculated scripts.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.Commands.OutputFunction">
            <summary>
            A function to invoke when output is generated.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.ExecuteCommands(System.String,FreneticScript.CommandSystem.Commands.OutputFunction)">
            <summary>
            Executes an arbitrary list of command inputs (separated by newlines, semicolons, ...)
            </summary>
            <param name="commands">The command string to parse.</param>
            <param name="outputter">The output function to call, or null if none.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.RegisterCommand(FreneticScript.CommandSystem.AbstractCommand)">
            <summary>
            Adds a command to the registered command list.
            </summary>
            <param name="command">The command to register.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.UnregisterCommand(System.String)">
            <summary>
            Removes a command from the registered command list.
            Silently fails if command is not registered.
            </summary>
            <param name="name">The name of the command to remove.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.RegisterEvent(FreneticScript.CommandSystem.ScriptEvent)">
            <summary>
            Registers a script event to the system.
            </summary>
            <param name="newevent">The event to register.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.Init">
            <summary>
            Prepares the command system, registering all base commands.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.PostInit">
            <summary>
            Final preparation for the command system, after all data has been registered.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Commands.TheRunCommand">
            <summary>
            The registered RunCommand instance.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Commands.Tick(System.Single)">
            <summary>
            Advances any running command queues.
            </summary>
            <param name="Delta">The time passed this tick.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.CommandScript">
            <summary>
            Represents a series of commands, not currently being processed.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandScript.SeparateCommands(System.String,System.String,FreneticScript.CommandSystem.Commands,System.Boolean)">
            <summary>
            Separates a string list of command inputs (separated by newlines, semicolons, ...)
            and returns a queue object containing all the input commands
            </summary>
            <param name="name">The name of the script.</param>
            <param name="commands">The command string to parse.</param>
            <param name="system">The command system to create the script within.</param>
            <param name="compile">Whether the script should be compiled.</param>
            <returns>A list of command strings.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandScript.CreateBlock(System.String,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String},FreneticScript.CommandSystem.CommandEntry,FreneticScript.CommandSystem.Commands,System.String,System.Int32,System.Boolean@)">
            <summary>
            Converts a list of command strings to a CommandEntry list, handling any { braced } blocks inside.
            </summary>
            <param name="name">The name of the script.</param>
            <param name="lines">The file line numbers for the corresponding command strings.</param>
            <param name="from">The command strings.</param>
            <param name="entry">The entry that owns this block.</param>
            <param name="system">The command system to create this block inside.</param>
            <param name="tabs">How far out tabulation should go.</param>
            <param name="had_error">Whether there was a compile error.</param>
            <param name="istart">The starting index.</param>
            <returns>A list of entries with blocks separated.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandScript.GetByFileName(System.String,FreneticScript.CommandSystem.Commands)">
            <summary>
            Creates a script by file name.
            </summary>
            <param name="filename">The name of the file to execute.</param>
            <param name="system">The command system to get the script for.</param>
            <returns>A command script, or null of the file does not exist.</returns>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandScript.Name">
            <summary>
            The name of the script.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandScript.Debug">
            <summary>
            The default debugmode for queues running this script.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandScript.Created">
            <summary>
            All commands in the script.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandScript.#ctor(System.String,System.Collections.Generic.List{FreneticScript.CommandSystem.CommandEntry},System.Int32,System.Boolean)">
            <summary>
            Constructs a new command script.
            </summary>
            <param name="_name">The name of the script.</param>
            <param name="_commands">All commands in the script.</param>
            <param name="adj">How far to negatively adjust the entries' block positions, if any.</param>
            <param name="compile">Whether the script should be compiled.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandScript.ToQueue(FreneticScript.CommandSystem.Commands)">
            <summary>
            Creates a new queue for this script.
            </summary>
            <param name="system">The command system to make the queue in.</param>
            <returns>The created queue.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandScript.ToString">
            <summary>
            Returns the name of the script.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandScript.FullString(System.String)">
            <summary>
            Gets the full command string that represents this script.
            </summary>
            <param name="tabulation">How much space to include in front of the commands.</param>
            <returns>The full command string.</returns>
        </member>
        <member name="T:FreneticScript.CommandSystem.CompiledCommandRunnable">
            <summary>
            Abstract class for compiled runnables.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CompiledCommandRunnable.CSEntry">
            <summary>
            The command stack entry that forms this runnable.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CompiledCommandRunnable.RunMethod">
            <summary>
            This class's "Run(queue)" method.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CompiledCommandRunnable.Run(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.IntHolder,System.Int32)">
            <summary>
            Runs the runnable.
            </summary>
            <param name="queue">The queue to run on.</param>
            <param name="counter">The current command index.</param>
            <param name="fent">The first entry (the entry to start calculating at).</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.IntHolder">
            <summary>
            Holds a 32-bit integer.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.IntHolder.Internal">
            <summary>
            The actual integer.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.CommandStackEntry">
            <summary>
            Represents a single entry in a command stack.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandStackEntry.Index">
            <summary>
            The index of the currently running command.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandStackEntry.Entries">
            <summary>
            All available commands.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandStackEntry.EntryData">
            <summary>
            All entry data available in this CommandStackEntry.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandStackEntry.Callback">
            <summary>
            Run this when the CommandStackEntry STOPs.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandStackEntry.Run(FreneticScript.CommandSystem.CommandQueue)">
            <summary>
            Run this command stack.
            </summary>
            <param name="queue">The queue to run under.</param>
            <returns>Whether to continue looping.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandStackEntry.HandleError(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry,System.String)">
            <summary>
            Handles an error as appropriate to the situation, in the current queue, from the current command.
            </summary>
            <param name="queue">The associated queue.</param>
            <param name="entry">The command entry that errored.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandStackEntry.Variables">
            <summary>
            All variables available in this portion of the stack.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandStackEntry.Debug">
            <summary>
            How much debug information this portion of the stack should show.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommandStackEntry.Duplicate">
            <summary>
            Perfectly duplicates this stack entry.
            </summary>
            <returns>The newly duplicated stack entry.</returns>
        </member>
        <member name="T:FreneticScript.CommandSystem.CommandStackRetVal">
            <summary>
            Represents the return value from a command stack run call.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandStackRetVal.CONTINUE">
            <summary>
            Tells the queue to continue.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandStackRetVal.BREAK">
            <summary>
            Tells the queue to wait a while.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CommandStackRetVal.STOP">
            <summary>
            Tells the queue to stop entirely.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommonCmds.ReloadCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.CommonCmds.CleanmemCommand">
            <summary>
            A command to interact with the system garbage collector.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommonCmds.CleanmemCommand.#ctor">
            <summary>
            Constructs the command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommonCmds.CleanmemCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommonCmds.CvarinfoCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.CommonCmds.DebugOutputInvalidCommand">
            <summary>
            A non-user-invocable command called when no other command exists.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommonCmds.DebugOutputInvalidCommand.#ctor">
            <summary>
            Constructs the command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommonCmds.DebugOutputInvalidCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommonCmds.EchoCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommonCmds.NoopCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommonCmds.SetCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.CommonCmds.ToggleCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.CompiledCommandStackEntry">
            <summary>
            Represetns a precompiled command stack entry.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CompiledCommandStackEntry.MainCompiledRunnable">
            <summary>
            The compiled runner object.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CompiledCommandStackEntry.AdaptedILPoints">
            <summary>
            Where in the CIL code each entry starts.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CompiledCommandStackEntry.LocalVariables">
            <summary>
            Variables local to the compiled function.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.CompiledCommandStackEntry.LocalVarNames">
            <summary>
            The names of local variables.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.CompiledCommandStackEntry.Duplicate">
            <summary>
            Perfectly duplicates this stack entry.
            </summary>
            <returns>The newly duplicated stack entry.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.CompiledCommandStackEntry.Run(FreneticScript.CommandSystem.CommandQueue)">
            <summary>
            Run this command stack.
            </summary>
            <param name="queue">The queue to run under.</param>
            <returns>Whether to continue looping.</returns>
        </member>
        <member name="T:FreneticScript.CommandSystem.QueueCmds.DebugVarSetCommand">
            <summary>
            Sets a var, debuggishly!
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.DebugVarSetCommand.#ctor">
            <summary>
            Constructs the command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.DebugVarSetCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executs the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">The entry to execute with.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.CatchCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.GotoCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.QueueCmds.IfCommand">
            <summary>
            The if command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.IfCommand.#ctor">
            <summary>
            Construct the if commnad.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.IfCommand.TryIfCILMethod">
            <summary>
            Represents the "TryIfCIL(queue, entry)" method.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.IfCommand.AdaptToCIL(FreneticScript.CommandSystem.CILAdaptationValues,System.Int32)">
            <summary>
            Adapts a command entry to CIL.
            </summary>
            <param name="values">The adaptation-relevant values.</param>
            <param name="entry">The present entry ID.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.IfCommand.TryIfCIL(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command via CIL.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.IfCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.IfCommand.TryIf(System.Collections.Generic.List{System.String})">
            <summary>
            Tries input IF to see if it is TRUE or FALSE.
            </summary>
            <param name="arguments">The input arguments.</param>
            <returns>Whether it is true or not.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.ErrorCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.MarkCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.QueueCmds.RepeatCommand">
            <summary>
            The repeat command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.RepeatCommand.#ctor">
            <summary>
            Constructs the repeat command.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.RepeatCommand.TryRepeatCILMethod">
            <summary>
            Represents the "TryRepeatCIL(queue, entry)" method.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.RepeatCommand.TryRepeatNumberedCILMethod">
            <summary>
            Represents the "TryRepeatNumberedCIL(queue, entry)" method.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.RepeatCommand.AdaptToCIL(FreneticScript.CommandSystem.CILAdaptationValues,System.Int32)">
            <summary>
            Adapts a command entry to CIL.
            </summary>
            <param name="values">The adaptation-relevant values.</param>
            <param name="entry">The present entry ID.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.RepeatCommand.TryRepeatCIL(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the callback part of the repeat command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.RepeatCommand.TryRepeatNumberedCIL(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the numbered input part of the repeat command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.RepeatCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.QueueCmds.RunCommand">
            <summary>
            A command to allow running scripts from the script folder.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.RunCommand.#ctor">
            <summary>
            Constructs the run command.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.RunCommand.OnScriptRanPreEvent">
            <summary>
            The first event fired in a sequence of three.
            <para/>Fires when a a script is going to be ran, cancellable.
            <para/>Contains the name of the script only.
            <para/>Second: <see cref="F:FreneticScript.CommandSystem.QueueCmds.RunCommand.OnScriptRanEvent"/>.
            <para/>Third: <see cref="F:FreneticScript.CommandSystem.QueueCmds.RunCommand.OnScriptRanPostEvent"/>.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.RunCommand.OnScriptRanEvent">
            <summary>
            The second event fired in a sequence of three.
            <para/>Fires when a a script is about to be ran, cancellable.
            <para/>Contains a validly constructed <see cref="T:FreneticScript.CommandSystem.CommandScript"/> object.
            <para/>First: <see cref="F:FreneticScript.CommandSystem.QueueCmds.RunCommand.OnScriptRanPreEvent"/>.
            <para/>Third: <see cref="F:FreneticScript.CommandSystem.QueueCmds.RunCommand.OnScriptRanPostEvent"/>.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.RunCommand.OnScriptRanPostEvent">
            <summary>
            The third event fired in a sequence of three.
            <para/>Fires when a a script has been ran, monitor-only.
            <para/>First: <see cref="F:FreneticScript.CommandSystem.QueueCmds.RunCommand.OnScriptRanPreEvent"/>.
            <para/>Second: <see cref="F:FreneticScript.CommandSystem.QueueCmds.RunCommand.OnScriptRanEvent"/>.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.RunCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the run command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">The command details to be ran.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.QueueCmds.EntryFinisher">
            <summary>
            A mini-class used for the callback for &amp;waitable commands.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.EntryFinisher.Entry">
            <summary>
            The entry being waited on.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.EntryFinisher.Queue">
            <summary>
            The relevant queue.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.EntryFinisher.Complete(System.Object,FreneticScript.CommandSystem.CommandQueueEventArgs)">
            <summary>
            Add this function as a callback to complete entry.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.QueueCmds.ScriptRanPreEventArgs">
            <summary>
            Fires when a a script is going to be ran, cancellable.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.ScriptRanPreEventArgs.ScriptName">
            <summary>
            The name of the script requested to be run.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.ScriptRanPreEventArgs.Cancelled">
            <summary>
            Whether the script should be prevented from running.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.QueueCmds.ScriptRanEventArgs">
            <summary>
            Fires when a a script is about to be ran, cancellable.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.ScriptRanEventArgs.Script">
            <summary>
            The script that will be ran.
            Do not edit.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.ScriptRanEventArgs.Cancelled">
            <summary>
            Whether the script should be prevented from running.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.QueueCmds.ScriptRanPostEventArgs">
            <summary>
            Fires when a a script has been ran, monitor-only.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.QueueCmds.ScriptRanPostEventArgs.Script">
            <summary>
            The script that was ran.
            Do not edit.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.QueueCmds.VarCommand">
            <summary>
            The var command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.VarCommand.#ctor">
            <summary>
            Construct the var command.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.VarCommand.PreAdaptToCIL(FreneticScript.CommandSystem.CILAdaptationValues,System.Int32)">
            <summary>
            Prepares to adapt a command entry to CIL.
            </summary>
            <param name="values">The adaptation-relevant values.</param>
            <param name="entry">The present entry ID.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.VarCommand.AdaptToCIL(FreneticScript.CommandSystem.CILAdaptationValues,System.Int32)">
            <summary>
            Adapts a command entry to CIL.
            </summary>
            <param name="values">The adaptation-relevant values.</param>
            <param name="entry">The present entry ID.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.QueueCmds.VarCommand.Execute(FreneticScript.CommandSystem.CommandQueue,FreneticScript.CommandSystem.CommandEntry)">
            <summary>
            Executes the command.
            </summary>
            <param name="queue">The command queue involved.</param>
            <param name="entry">Entry to be executed.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.ErrorInducedException">
            <summary>
            Represents an exception induced by a script error. Should be ignored/re-thrown to let the error propogate up to the script level.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.ErrorInducedException.#ctor">
            <summary>
            Constructs a plain error induced exception.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.ErrorInducedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an error induced exception with a message and inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.ErrorInducedException.#ctor(System.String)">
            <summary>
            Constructs an error induced exception with a message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:FreneticScript.CommandSystem.Outputter">
            <summary>
            An abstract class, implementations should provide methods that output to a console or equivalent.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Outputter.WriteLine(System.String)">
            <summary>
            Writes a line of text to the console.
            </summary>
            <param name="text">The line of text.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.Outputter.Bad(System.String,FreneticScript.CommandSystem.DebugMode)">
            <summary>
            Used to output a failure message.
            </summary>
            <param name="tagged_text">The text to output, with tags included.</param>
            <param name="mode">What debug mode is currently in use.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.Outputter.Good(System.String,FreneticScript.CommandSystem.DebugMode)">
            <summary>
            Used to output a success message.
            </summary>
            <param name="tagged_text">The text to output, with tags included.</param>
            <param name="mode">What debug mode is currently in use.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.Outputter.UnknownCommand(FreneticScript.CommandSystem.CommandQueue,System.String,System.String[])">
            <summary>
            Used to properly handle an unknown command.
            </summary>
            <param name="queue">The queue firing this unknown command.</param>
            <param name="basecommand">The command that wasn't recognized.</param>
            <param name="arguments">The commands arguments.</param>
        </member>
        <member name="F:FreneticScript.CommandSystem.Outputter.CVarSys">
            <summary>
            The CVar System used by this command engine.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Outputter.ReadTextFile(System.String)">
            <summary>
            Used to read a text file, generally a script.
            File format is along the lines of "mymap/myscript.cfg".
            Throw a System.IO.FileNotFoundException if file does not exist.
            </summary>
            <param name="name">The filename to read.</param>
            <returns>The read text file.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.Outputter.ReadDataFile(System.String)">
            <summary>
            Used to read a text file, generally generic data for a script.
            File format is along the lines of "mymap/mydata.yml".
            Throw a System.IO.FileNotFoundException if file does not exist.
            </summary>
            <param name="name">The filename to read.</param>
            <returns>The read data file.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.Outputter.WriteDataFile(System.String,System.Byte[])">
            <summary>
            Used to write a text file, generally generic data for a script.
            File format is along the lines of "mymap/mydata.yml".
            </summary>
            <param name="name">The filename to write.</param>
            <param name="data">The data to write to file.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.Outputter.Reload">
            <summary>
            Used when the system is reloaded, to delete any temporary script-related data.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.Outputter.Initializing">
            <summary>
            Whether the game is still setting up currently. (Used by the InitOnly CVar system).
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.Outputter.ShouldErrorOnInvalidCommand">
            <summary>
            Whether the system should error when an invalid command is detected.
            </summary>
        </member>
        <member name="T:FreneticScript.CommandSystem.ScriptEvent">
            <summary>
            An abstract class, implementations of this should be used to fire events within the script engine.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.ScriptEvent.Cancellable">
            <summary>
            Whether this event can be cancelled.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.GetHandlers(FreneticScript.CommandSystem.ScriptEvent)">
            <summary>
            Gets the list of CommandScripts that handle an event currently.
            </summary>
            <param name="_event">The event to get the handlers for.</param>
            <returns>The list of handlers.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.Init">
            <summary>
            Set up the script event. For use by the event system itself.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.Destroy">
            <summary>
            Shut down the script event. For use by the event system itself.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.ScriptEvent.Handlers">
            <summary>
            All scripts that handle this event.
            TODO: SortedSet?
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.RegisterPriority(System.Int32)">
            <summary>
            Register a specific priority with the underlying event.
            </summary>
            <param name="prio">The priority.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.DeregisterPriority(System.Int32)">
            <summary>
            Deregister a specific priority with the underlying event.
            </summary>
            <param name="prio">The priority.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.RegisterEventHandler(System.Int32,FreneticScript.CommandSystem.CommandScript)">
            <summary>
            Register a new event handler to this script event.
            </summary>
            <param name="prio">The priority to use.</param>
            <param name="script">The script to register to the handler</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.RemoveEventHandler(System.String)">
            <summary>
            Removes an event handler by name.
            </summary>
            <param name="name">The name of the handler to remove.</param>
            <returns>Whether there was a removal.</returns>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.Clear">
            <summary>
            Clears away all event handlers.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.ScriptEvent.System">
            <summary>
            The command system in use.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.ScriptEvent.Cancelled">
            <summary>
            Whether the script event has been cancelled.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.#ctor(FreneticScript.CommandSystem.Commands,System.String,System.Boolean)">
            <summary>
            Constructs the script event's base data.
            Called only by implementing script events.
            </summary>
            <param name="_system">The command system this event exists within.</param>
            <param name="_name">The name of the event.</param>
            <param name="cancellable">Whether the event can be cancelled.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.Sort">
            <summary>
            Quickly sorts the event handlers.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.UpdateVariables(System.Collections.Generic.Dictionary{System.String,FreneticScript.TagHandlers.TemplateObject})">
            <summary>
            Update all variables from a ran script onto the event itself.
            </summary>
            <param name="vars">The vars to update.</param>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.Call(System.Int32)">
            <summary>
            Calls the event.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.GetVariables">
            <summary>
            Get all variables according the script event's current values.
            </summary>
        </member>
        <member name="F:FreneticScript.CommandSystem.ScriptEvent.Name">
            <summary>
            The name of this event.
            </summary>
        </member>
        <member name="M:FreneticScript.CommandSystem.ScriptEvent.Duplicate">
            <summary>
            Create a copy of this script event, safe to run.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="T:FreneticScript.EnumExtensions">
            <summary>
            Adds HasFlag to the CVarFlag enum, for .NET 3.5 usage of a .NET 4.0 trick.
            </summary>
        </member>
        <member name="M:FreneticScript.EnumExtensions.HasFlag(FreneticScript.CVarFlag,FreneticScript.CVarFlag)">
            <summary>
            Returns whether the Flag set has a specific flag.
            </summary>
            <param name="tenum">The flag set.</param>
            <param name="val">The specific flag.</param>
            <returns>Whether it is had.</returns>
        </member>
        <member name="T:FreneticScript.CVarFlag">
            <summary>
            The various possible information flags a CVar can hold.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarFlag.None">
            <summary>
            No information.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarFlag.ReadOnly">
            <summary>
            This flag cannot be edited, and exists to represent system information.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarFlag.Textual">
            <summary>
            This flag should be treated as text.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarFlag.Numeric">
            <summary>
            This tag should be treated as a number.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarFlag.Boolean">
            <summary>
            This flag should be treated as true/false.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarFlag.Delayed">
            <summary>
            This flag won't immediately have an effect when edited.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarFlag.UserMade">
            <summary>
            This flag was made by a user.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarFlag.InitOnly">
            <summary>
            This flag can only be modified during load time.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarFlag.ServerControl">
            <summary>
            This flag is on a client, but controlled by the server.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarFlag.DoNotSave">
            <summary>
            This flag should not be saved across system restarts.
            Useful for scripts to use when tracking temporary data.
            </summary>
        </member>
        <member name="T:FreneticScript.CVar">
            <summary>
            Represents a name:value pair within a complex system.
            </summary>
        </member>
        <member name="F:FreneticScript.CVar.Name">
            <summary>
            The name of the CVar.
            </summary>
        </member>
        <member name="F:FreneticScript.CVar.Value">
            <summary>
            The value of the CVar, as text.
            </summary>
        </member>
        <member name="F:FreneticScript.CVar.ValueL">
            <summary>
            The value of the CVar, as a long.
            </summary>
        </member>
        <member name="F:FreneticScript.CVar.ValueI">
            <summary>
            The value of the CVar, as an int.
            </summary>
        </member>
        <member name="F:FreneticScript.CVar.ValueD">
            <summary>
            The value of the CVar, as a double.
            </summary>
        </member>
        <member name="F:FreneticScript.CVar.ValueF">
            <summary>
            The value of the CVar, as a float.
            </summary>
        </member>
        <member name="F:FreneticScript.CVar.ValueB">
            <summary>
            The value of the CVar, as a boolean.
            </summary>
        </member>
        <member name="F:FreneticScript.CVar.Flags">
            <summary>
            The CVar flags set.
            </summary>
        </member>
        <member name="F:FreneticScript.CVar.system">
            <summary>
            The system that generated this CVar.
            </summary>
        </member>
        <member name="F:FreneticScript.CVar.Description">
            <summary>
            An implementor can optionally apply a description to a CVar to show in Info() and any implementor-managed code.
            </summary>
        </member>
        <member name="F:FreneticScript.CVar.Tag">
            <summary>
            Any object can be attached to a CVar to mark it for the implementing engine.
            </summary>
        </member>
        <member name="M:FreneticScript.CVar.#ctor(System.String,System.String,FreneticScript.CVarFlag,FreneticScript.CVarSystem)">
            <summary>
            Construct a CVar.
            </summary>
            <param name="newname">The name of  the CVar.</param>
            <param name="newvalue">The value to set the CVar to.</param>
            <param name="newflags">The flags the CVar should be locked into.</param>
            <param name="_system">The CVarSystem to create this CVar within.</param>
        </member>
        <member name="F:FreneticScript.CVar.OnChanged">
            <summary>
            This event is called when the CVar is changed.
            </summary>
        </member>
        <member name="M:FreneticScript.CVar.Set(System.String,System.Boolean)">
            <summary>
            Sets the CVar to a new value.
            A force change will not trigger a system 'modified' save.
            </summary>
            <param name="newvalue">The value to set the CVar to.</param>
            <param name="force">Whether to force the edit (EG, a server has demanded the change).</param>
        </member>
        <member name="M:FreneticScript.CVar.Set(System.Boolean)">
            <summary>
            Sets the CVar to a new value.
            </summary>
            <param name="value">The value to set the CVar to.</param>
        </member>
        <member name="M:FreneticScript.CVar.FlagInfo">
            <summary>
            Returns a human-readable list of flags.
            </summary>
            <returns>The flag list.</returns>
        </member>
        <member name="M:FreneticScript.CVar.Info">
            <summary>
            Returns a human-readable colored information line from this CVar.
            </summary>
            <returns>The information.</returns>
        </member>
        <member name="T:FreneticScript.CVarSystem">
            <summary>
            A system for handling user controllable data variables.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarSystem.CVarList">
            <summary>
            A list of all existent CVars.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarSystem.CVars">
            <summary>
            A full map of all existent CVars.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarSystem.Output">
            <summary>
            The client/server outputter to use.
            </summary>
        </member>
        <member name="F:FreneticScript.CVarSystem.Modified">
            <summary>
            Whether the system has been modified or updated since this variable was last set to false.
            This variable is so implementations can save CVars to file only when needed.
            </summary>
        </member>
        <member name="M:FreneticScript.CVarSystem.#ctor(FreneticScript.CommandSystem.Outputter)">
            <summary>
            Constructs the CVar system.
            </summary>
            <param name="_output">The outputter to use.</param>
        </member>
        <member name="M:FreneticScript.CVarSystem.Register(System.String,System.String,FreneticScript.CVarFlag,System.String)">
            <summary>
            Registers a new CVar.
            </summary>
            <param name="CVar">The name of the CVar.</param>
            <param name="value">The default value.</param>
            <param name="flags">The flags to set on this CVar.</param>
            <param name="description">An optional description text for a CVar.</param>
            <returns>The registered CVar.</returns>
        </member>
        <member name="M:FreneticScript.CVarSystem.AbsoluteSet(System.String,System.String,System.Boolean,FreneticScript.CVarFlag)">
            <summary>
            Sets the value of an existing CVar, or generates a new one.
            </summary>
            <param name="CVar">The name of the CVar.</param>
            <param name="value">The value to set it to.</param>
            <param name="force">Whether to force a server send.</param>
            <param name="flags_if_new">What flags to set if the CVar is new.</param>
            <returns>The set CVar.</returns>
        </member>
        <member name="M:FreneticScript.CVarSystem.AbsoluteGet(System.String,System.String)">
            <summary>
            Gets an existing CVar, or generates a new one with a specific default value.
            </summary>
            <param name="CVar">The name of the CVar.</param>
            <param name="value">The default value if it doesn't exist.</param>
            <returns>The found CVar.</returns>
        </member>
        <member name="M:FreneticScript.CVarSystem.Get(System.String)">
            <summary>
            Gets the CVar that matches a specified name.
            </summary>
            <param name="CVar">The name of the CVar.</param>
            <returns>The found CVar, or null if none.</returns>
        </member>
        <member name="T:FreneticScript.FreneticScriptEventHandler`1">
            <summary>
            Handles events, with a simple priority system.
            Not particularly asyncable.
            Fires in priority order.
            </summary>
            <typeparam name="T">The event arguments type to use.</typeparam>
        </member>
        <member name="F:FreneticScript.FreneticScriptEventHandler`1.InternalActions">
            <summary>
            All handlers in the event.
            </summary>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventHandler`1.Fire(`0)">
            <summary>
            Fires the event handlers.
            </summary>
            <param name="args">The arguments to fire with.</param>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventHandler`1.Add(System.Action{System.Int32,`0},System.Int32)">
            <summary>
            Adds an event entry with a specific priority.
            </summary>
            <param name="act">The action to run.</param>
            <param name="priority">The priority of the action.</param>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventHandler`1.Contains(System.Action{System.Int32,`0},System.Int32)">
            <summary>
            Returns whether the given action is contained with the given priority.
            </summary>
            <param name="act">The action to test for.</param>
            <param name="priority">The priority of the action.</param>
            <returns></returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventHandler`1.Remove(System.Action{System.Int32,`0},System.Int32)">
            <summary>
            Remove an event entry with a specific priority.
            </summary>
            <param name="act">The action to no longer run.</param>
            <param name="priority">The priority of the action.</param>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventHandler`1.op_Addition(FreneticScript.FreneticScriptEventHandler{`0},System.Action{System.Int32,`0})">
            <summary>
            Adds an action to an event, with a default priority of exactly zero (0).
            </summary>
            <param name="evt">The original event.</param>
            <param name="act">The action to add.</param>
            <returns>The input event.</returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventHandler`1.op_Subtraction(FreneticScript.FreneticScriptEventHandler{`0},System.Action{System.Int32,`0})">
            <summary>
            Removes an action from an event.
            </summary>
            <param name="evt">The original event.</param>
            <param name="act">The action to remove.</param>
            <returns>The input event.</returns>
        </member>
        <member name="T:FreneticScript.FreneticScriptEventEntry`1">
            <summary>
            Represents a prioritized event entry.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventEntry`1.#ctor(System.Action{System.Int32,`0})">
            <summary>
            Constructs a prioritized event entry.
            </summary>
            <param name="a">The action to use.</param>
        </member>
        <member name="F:FreneticScript.FreneticScriptEventEntry`1.Priority">
            <summary>
            The priority by which the action is run.
            </summary>
        </member>
        <member name="F:FreneticScript.FreneticScriptEventEntry`1.Act">
            <summary>
            The action used.
            </summary>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventEntry`1.CompareTo(FreneticScript.FreneticScriptEventEntry{`0})">
            <summary>
            Compares this event entry to another.
            </summary>
            <param name="other">The other.</param>
            <returns>The relative priority.</returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventEntry`1.Equals(FreneticScript.FreneticScriptEventEntry{`0})">
            <summary>
            Returns whether this event entry is equal to another.
            </summary>
            <param name="other">The other.</param>
            <returns>Whether they are equal.</returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventEntry`1.Equals(System.Object)">
            <summary>
            Returns whether this event entry is equal to another.
            </summary>
            <param name="obj">The other.</param>
            <returns>Whether they are equal.</returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventEntry`1.GetHashCode">
            <summary>
            Returns the hash code (merely the priority) of this event enty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventEntry`1.op_Equality(FreneticScript.FreneticScriptEventEntry{`0},FreneticScript.FreneticScriptEventEntry{`0})">
            <summary>
            Returns whether two event entries are equal.
            </summary>
            <param name="x">The first entry.</param>
            <param name="y">The second entry.</param>
            <returns>Whether they are equal.</returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptEventEntry`1.op_Inequality(FreneticScript.FreneticScriptEventEntry{`0},FreneticScript.FreneticScriptEventEntry{`0})">
            <summary>
            Returns whether two event entries are NOT equal.
            </summary>
            <param name="x">The first entry.</param>
            <param name="y">The second entry.</param>
            <returns>Whether they are NOT equal.</returns>
        </member>
        <member name="T:FreneticScript.StringExtensions">
            <summary>
            Adds some extensions to strings.
            </summary>
        </member>
        <member name="M:FreneticScript.StringExtensions.ToLowerFast(System.String)">
            <summary>
            Rapidly converts a string to a lowercase representation.
            </summary>
            <param name="input">The original string.</param>
            <returns>A lowercase version.</returns>
        </member>
        <member name="M:FreneticScript.StringExtensions.SplitFast(System.String,System.Char,System.Int32)">
            <summary>
            Quickly split a string.
            </summary>
            <param name="input">The original string.</param>
            <param name="splitter">What to split it by.</param>
            <param name="count">The maximum number of times to split it.</param>
            <returns>The split string pieces.</returns>
        </member>
        <member name="T:FreneticScript.FreneticScriptUtilities">
            <summary>
            Utilities for FreneticScript.
            </summary>
        </member>
        <member name="F:FreneticScript.FreneticScriptUtilities.Enc">
            <summary>
            The encoding used by FrenetiCScript.
            </summary>
        </member>
        <member name="M:FreneticScript.FreneticScriptUtilities.StringToLong(System.String)">
            <summary>
            Converts a string value to the long-integer value it represents.
            Returns 0 if the string does not represent a long-integer.
            </summary>
            <param name="input">The string to get the value from.</param>
            <returns>a long-integer value.</returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptUtilities.StringToInt(System.String)">
            <summary>
            Converts a string value to the integer value it represents.
            Returns 0 if the string does not represent an integer.
            </summary>
            <param name="input">The string to get the value from.</param>
            <returns>an integer value.</returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptUtilities.StringToDouble(System.String)">
            <summary>
            Converts a string value to the double value it represents.
            Returns 0 if the string does not represent a double.
            </summary>
            <param name="input">The string to get the value from.</param>
            <returns>a double value.</returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptUtilities.StringToFloat(System.String)">
            <summary>
            Converts a string value to the float value it represents.
            Returns 0 if the string does not represent a float.
            </summary>
            <param name="input">The string to get the value from.</param>
            <returns>a float value.</returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptUtilities.StringToDateTime(System.String)">
            <summary>
            Converts a string to a date-time.
            </summary>
            <param name="input">The input string.</param>
            <returns>The date-time.</returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptUtilities.DateTimeToString(System.DateTimeOffset,System.Boolean)">
            <summary>
            Returns a string representation of the specified time.
            </summary>
            <param name="dt">The datetime object.</param>
            <param name="ms">Whether to include milliseconds.</param>
            <returns>The time as a string.</returns>
        </member>
        <member name="M:FreneticScript.FreneticScriptUtilities.Pad(System.String,System.Char,System.Int32,System.Boolean)">
            <summary>
            Pads a string to a specified length with a specified input, on a specified side.
            </summary>
            <param name="input">The original string.</param>
            <param name="padding">The symbol to pad with.</param>
            <param name="length">How far to pad it to.</param>
            <param name="left">Whether to pad left (true), or right (false).</param>
            <returns>The padded string.</returns>
        </member>
        <member name="T:FreneticScript.ListQueue`1">
            <summary>
            Holds an array, managing it both like a list and like a queue depending on need.
            </summary>
        </member>
        <member name="F:FreneticScript.ListQueue`1.Objects">
            <summary>
            The internal array.
            NOTE: INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:FreneticScript.ListQueue`1.Head">
            <summary>
            The head of the array.
            IE, the index of the first real object.
            NOTE: INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:FreneticScript.ListQueue`1.Length">
            <summary>
            The true length of the array, not counting things before the head or after the end.
            </summary>
        </member>
        <member name="F:FreneticScript.ListQueue`1.Max">
            <summary>
            How far the <see cref="F:FreneticScript.ListQueue`1.Head"/> can get before the buffer is forcibly shortened.
            Defaults to 500.
            </summary>
        </member>
        <member name="P:FreneticScript.ListQueue`1.Item(System.Int32)">
            <summary>
            Access a member of the <see cref="T:FreneticScript.ListQueue`1"/>
            </summary>
            <param name="index">The position in the public side of the list to read from.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:FreneticScript.ListQueue`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes the <see cref="T:FreneticScript.ListQueue`1"/> with specified initial entries.
            </summary>
            <param name="entries">.</param>
        </member>
        <member name="M:FreneticScript.ListQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes the <see cref="T:FreneticScript.ListQueue`1"/> with a specified capacity.
            </summary>
            <param name="capacity">The number of items to expect to hold, is non-definite.</param>
        </member>
        <member name="M:FreneticScript.ListQueue`1.Peek">
            <summary>
            Returns the item at head of the queue, without removing it, if it has one.
            </summary>
            <returns>The item found.</returns>
        </member>
        <member name="M:FreneticScript.ListQueue`1.Pop">
            <summary>
            Takes the first object off the queue and removes it, if it has one.
            On rare occasions, expensive (if head reaches the max).
            </summary>
            <returns>The head object.</returns>
        </member>
        <member name="M:FreneticScript.ListQueue`1.Push(`0)">
            <summary>
            Adds an object to the end of the queue.
            On rare occasions, expensive (if internal buffer must expand).
            </summary>
            M<param name="obj">The object to push onto the queue.</param>
        </member>
        <member name="M:FreneticScript.ListQueue`1.MoveHeadBack">
            <summary>
            Return the <see cref="F:FreneticScript.ListQueue`1.Head"/> to a 0 index.
            Expensive.
            </summary>
        </member>
        <member name="M:FreneticScript.ListQueue`1.Expand(System.Int32)">
            <summary>
            Expands the <see cref="T:FreneticScript.ListQueue`1"/>'s internal buffer.
            Expensive.
            </summary>
            <param name="amount">The amount to expand it by.</param>
        </member>
        <member name="M:FreneticScript.ListQueue`1.Clear">
            <summary>
            Effectively empties the ListQueue by scrapping the original internal buffer, and setting Length and Head to 0.
            Mildly expensive.
            </summary>
        </member>
        <member name="M:FreneticScript.ListQueue`1.Insert(System.Int32,`0[])">
            <summary>
            Inserts entries to the buffer.
            Expensive.
            </summary>
            <param name="index">The place to start inserting at.</param>
            <param name="entries">The entries to insert.</param>
        </member>
        <member name="T:FreneticScript.MessageType">
            <summary>
            Command output message types.
            </summary>
        </member>
        <member name="F:FreneticScript.MessageType.NUL">
            <summary>
            No output type, null, 0.
            </summary>
        </member>
        <member name="F:FreneticScript.MessageType.BAD">
            <summary>
            Bad output type, 1.
            </summary>
        </member>
        <member name="F:FreneticScript.MessageType.GOOD">
            <summary>
            Good output type, 2.
            </summary>
        </member>
        <member name="F:FreneticScript.MessageType.INFO">
            <summary>
            Informational output type, 3.
            </summary>
        </member>
        <member name="T:FreneticScript.TagHandlers.Common.LvarTagBase">
            <summary>
            Handles internal compiled var tags.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.LvarTagBase.#ctor">
            <summary>
            Construct the Lvar tag base.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.LvarTagBase.HandleOne(FreneticScript.TagHandlers.TagData)">
            <summary>
            Handles a single entry.
            </summary>
            <param name="data">The data.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.LvarTagBase.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Handles the entire tag.
            </summary>
            <param name="data">The data.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.Common.SystemTagBase">
            <summary>
            System tags.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.SystemTagBase.#ctor">
            <summary>
            Constructs the system tags.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.SystemTagBase.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Common.TimeTagBase">
            <summary>
            Gets a time tag.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.TimeTagBase.#ctor">
            <summary>
            Constructs the TimeTagBase - for internal use only.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.TimeTagBase.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Handles the 'time' tag.
            </summary>
            <param name="data">The data to be handled.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Common.TextColorTags">
            <summary>
            Returns the various default colors within the tag system.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.TextColorTags.#ctor">
            <summary>
            Construct the ColorTags - for internal use only.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.TextColorTags.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Handles a 'color' tag.
            </summary>
            <param name="data">The data to be handled.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Common.CVarTagBase">
            <summary>
            Returns CVar information.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.CVarTagBase.#ctor">
            <summary>
            Construct the CVarTags - for internal use only.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.CVarTagBase.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Handles a 'cvar' tag.
            </summary>
            <param name="data">The data to be handled.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Common.EscapeTagBase">
            <summary>
            Escapes questionable text input.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.EscapeTagBase.Escape(System.String)">
            <summary>
            Escapes a string.
            </summary>
            <param name="input">The unescaped string.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.EscapeTagBase.#ctor">
            <summary>
            Construct the EscapeTags - for internal use only.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.EscapeTagBase.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Handles the escape tag.
            </summary>
            <param name="data">The data to be handled.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Common.TernaryTagBase">
            <summary>
            Handles Ternary calculations.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.TernaryTagBase.#ctor">
            <summary>
            Construct the TernaryTags - for internal use only.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.TernaryTagBase.HandleOne(FreneticScript.TagHandlers.TagData)">
            <summary>
            Handles the 'ternary[]' tag.
            </summary>
            <param name="data">The data to be handled.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.TernaryTagBase.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Handles the 'ternary[]' tag.
            </summary>
            <param name="data">The data to be handled.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Common.TernaryTagBase.TernaryPassTag">
            <summary>
            Handles Ternary calculations.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Common.TernaryTagBase.TernaryPassTag.Passed">
            <summary>
            Whether this ternary tag passed.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.TernaryTagBase.TernaryPassTag.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Handles the 'ternary[].pass[]' tag.
            </summary>
            <param name="data">The data to be handled.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.TernaryTagBase.TernaryPassTag.ToString">
            <summary>
            Returns NullTag.ToString.
            </summary>
        </member>
        <member name="T:FreneticScript.TagHandlers.Common.BooleanTagBase">
            <summary>
            Gets a boolean tag.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.BooleanTagBase.#ctor">
            <summary>
            Constructs the BooleanTagBase - for internal use only.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.BooleanTagBase.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Handles the 'boolean' tag.
            </summary>
            <param name="data">The data to be handled.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Common.UnescapeTagBase">
            <summary>
            Unescapes questionable text input.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.UnescapeTagBase.Unescape(System.String)">
            <summary>
            Unescapes a string.
            </summary>
            <param name="input">The escaped string.</param>
            <returns>The unescaped string.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.UnescapeTagBase.#ctor">
            <summary>
            Construct the UnescapeTagBase - for internal use only.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.UnescapeTagBase.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Handles the 'unescape' tag.
            </summary>
            <param name="data">The data to be handled.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Common.UtilTagBase">
            <summary>
            Utility tags.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.UtilTagBase.#ctor">
            <summary>
            Constructs the Utility tags.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Common.UtilTagBase.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Objects.BinaryTag">
            <summary>
            Represents binary data.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.BinaryTag.Internal">
            <summary>
            The binary data this tag represents.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BinaryTag.For(FreneticScript.TagHandlers.TagData,System.String)">
            <summary>
            Get a binary tag relevant to the specified input, erroring on the command system if invalid input is given (Returns null in that case).
            </summary>
            <param name="dat">The TagData used to construct this BinaryTag.</param>
            <param name="input">The input text to create binary data from.</param>
            <returns>The binary tag.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BinaryTag.For(FreneticScript.TagHandlers.TagData,FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Get a binary tag relevant to the specified input, erroring on the command system if invalid input is given (Returns null in that case).
            </summary>
            <param name="dat">The TagData used to construct this BinaryTag.</param>
            <param name="input">The input to create or get binary data from.</param>
            <returns>The binary tag.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BinaryTag.#ctor(System.Byte[])">
            <summary>
            Constructs a binary tag.
            </summary>
            <param name="_val">The internal binary data to use.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BinaryTag.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BinaryTag.ToString">
            <summary>
            Returns the a string representation of the binary data internally stored by this boolean tag.
            This returns in hexadecimal format.
            </summary>
            <returns>A string representation of the binary data.</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.Objects.IntegerTag">
            <summary>
            Represents a number as a usable tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.IntegerTag.Internal">
            <summary>
            The integer this IntegerTag represents.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.For(FreneticScript.TagHandlers.TagData,System.String)">
            <summary>
            Get an integer tag relevant to the specified input, erroring on the command system if invalid input is given (Returns 0 in that case).
            Never null!
            </summary>
            <param name="dat">The TagData used to construct this IntegerTag.</param>
            <param name="input">The input text to create a integer from.</param>
            <returns>The integer tag.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.For(FreneticScript.TagHandlers.TagData,FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Get an integer tag relevant to the specified input, erroring on the command system if invalid input is given (Returns 0 in that case).
            Never null!
            </summary>
            <param name="dat">The TagData used to construct this IntegerTag.</param>
            <param name="input">The input text to create a integer from.</param>
            <returns>The integer tag.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.TryFor(System.String)">
            <summary>
            Tries to return a valid integer, or null.
            </summary>
            <param name="input">The input that is potentially an integer.</param>
            <returns>An integer, or null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.TryFor(FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Tries to return a valid integer, or null.
            </summary>
            <param name="input">The input that is potentially an integer.</param>
            <returns>An integer, or null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.#ctor(System.Int64)">
            <summary>
            Constructs an integer tag.
            </summary>
            <param name="_val">The internal integer to use.</param>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.IntegerTag.Handlers">
            <summary>
            All tag handlers for this tag type.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.ToString">
            <summary>
            Returns the a string representation of the integer internally stored by this integer tag. EG, could return "0", or "1", or...
            </summary>
            <returns>A string representation of the integer.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.Set(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Sets a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to set it to.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.Add(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Adds a value to a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to add.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.Subtract(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Subtracts a value from a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to subtract.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.Multiply(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Multiplies a value by a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to multiply.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.IntegerTag.Divide(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Divides a value from a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to divide.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Objects.MapTag">
            <summary>
            Represents a relationship between textual names and object data.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.MapTag.Internal">
            <summary>
            The internal dictionary that this MapTag represents.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.#ctor(System.Collections.Generic.Dictionary{System.String,FreneticScript.CommandSystem.ObjectHolder})">
            <summary>
            Constructs a MapTag from existing data.
            NOTE: This expects all keys to be lowercase!
            </summary>
            <param name="toUse">The data to use.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.#ctor(System.Collections.Generic.Dictionary{System.String,FreneticScript.TagHandlers.TemplateObject})">
            <summary>
            Constructs a MapTag from existing data.
            NOTE: This expects all keys to be lowercase!
            </summary>
            <param name="toUse">The data to use.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.#ctor">
            <summary>
            Constructs a MapTag without existing data.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.For(System.String)">
            <summary>
            Converts text to a map tag.
            Never null. Will ignore invalid entries.
            </summary>
            <param name="input">The input text.</param>
            <returns>The map represented by the input text.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.For(FreneticScript.TagHandlers.TagData,FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Converts a generic object to a map tag.
            Never null. Will ignore invalid entries.
            </summary>
            <param name="data">The relevant tag data, if any.</param>
            <param name="input">The input object.</param>
            <returns>The map represented by the input object.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.For(FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Converts a generic object to a map tag.
            Never null. Will ignore invalid entries.
            </summary>
            <param name="input">The input object.</param>
            <returns>The map represented by the input object.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.ToString">
            <summary>
            Gets a string representation of this map.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.Set(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Sets a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to set it to.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.Add(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Adds a value to a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to add.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.Subtract(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Subtracts a value from a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to subtract.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.Multiply(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Multiplies a value by a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to multiply.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.MapTag.Divide(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Divides a value from a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to divide.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Objects.NullTag">
            <summary>
            Represents a null value as a usable tag.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NullTag.For(System.String)">
            <summary>
            Get a null tag if the input is null, or an internal null value if the input is not a null tag.
            </summary>
            <param name="input">The input to create or get a null tag from.</param>
            <returns>The null tag, or internal null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NullTag.For(FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Get a null tag if the input is null, or an internal null value if the input is not a null tag.
            </summary>
            <param name="input">The input to create or get a null tag from.</param>
            <returns>The null tag, or internal null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NullTag.#ctor">
            <summary>
            Constructs a null tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.NullTag.Handlers">
            <summary>
            All tag handlers for this tag type.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NullTag.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NullTag.ToString">
            <summary>
            Returns "&amp;{NULL}".
            </summary>
            <returns>"&amp;{NULL}".</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.Objects.NumberTag">
            <summary>
            Represents a number as a usable tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.NumberTag.Internal">
            <summary>
            The number this NumberTag represents.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.For(FreneticScript.TagHandlers.TagData,System.String)">
            <summary>
            Get a number tag relevant to the specified input, erroring on the command system if invalid input is given (Returns 0 in that case).
            Never null!
            </summary>
            <param name="dat">The TagData used to construct this NumberTag.</param>
            <param name="input">The input text to create a number from.</param>
            <returns>The number tag.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.For(FreneticScript.TagHandlers.TagData,FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Get a number tag relevant to the specified input, erroring on the command system if invalid input is given (Returns 0 in that case).
            Never null!
            </summary>
            <param name="dat">The TagData used to construct this NumberTag.</param>
            <param name="input">The input text to create a number from.</param>
            <returns>The number tag.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.TryFor(System.String)">
            <summary>
            Tries to return a valid number, or null.
            </summary>
            <param name="input">The input that is potentially a number.</param>
            <returns>A number, or null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.TryFor(FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Tries to return a valid number, or null.
            </summary>
            <param name="input">The input that is potentially a number.</param>
            <returns>A number, or null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.#ctor(System.Double)">
            <summary>
            Constructs a number tag.
            </summary>
            <param name="_val">The internal number to use.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.ToString">
            <summary>
            Returns the a string representation of the number internally stored by this number tag. EG, could return "0", or "1", or "-1.005", or...
            </summary>
            <returns>A string representation of the number.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.Set(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Sets a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to set it to.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.Add(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Adds a value to a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to add.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.Subtract(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Subtracts a value from a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to subtract.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.Multiply(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Multiplies a value by a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to multiply.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.NumberTag.Divide(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Divides a value from a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to divide.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Objects.ListTag">
            <summary>
            Represents a list as a usable tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.ListTag.ListEntries">
            <summary>
            The list this ListTag represents.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.#ctor">
            <summary>
            Constructs a new list tag.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.#ctor(System.Collections.Generic.List{FreneticScript.TagHandlers.TemplateObject})">
            <summary>
            Constructs a list tag from a list of entries.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Constructs a list tag from a list of textual entries.
            </summary>
            <param name="entries">The textual entries.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.For(System.String)">
            <summary>
            Constructs a list tag from text input.
            </summary>
            <param name="list">The text input.</param>
            <returns>A valid list.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.For(FreneticScript.TagHandlers.TagData,FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Constructs a list tag from text input.
            </summary>
            <param name="data">The relevant tag data, if any.</param>
            <param name="list">The list input.</param>
            <returns>A valid list.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.For(FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Constructs a list tag from text input.
            </summary>
            <param name="list">The list input.</param>
            <returns>A valid list.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.ToStringList">
            <summary>
            Converts the ListTag to a list of strings.
            </summary>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.ToString">
            <summary>
            Converts the list tag to a string.
            </summary>
            <returns>A string representation of the list.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.ToCSString">
            <summary>
            Renders the list as a comma-separated string (no escaping).
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.ToSpaceString">
            <summary>
            Renders the list as a space-separated string (no escaping).
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.ToFlatString">
            <summary>
            Renders the list as an unseparated string (no escaping).
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.ListTag.Formatted">
            <summary>
            Renders the list as a comma-separated string with 'and' and similar constructs.
            </summary>
        </member>
        <member name="T:FreneticScript.TagHandlers.Objects.TagTypeTag">
            <summary>
            Represents a TagType, as a tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.TagTypeTag.Internal">
            <summary>
            The represented tag type.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TagTypeTag.#ctor(FreneticScript.TagHandlers.TagType)">
            <summary>
            Constructs a new TagTypeTag.
            </summary>
            <param name="type">The TagType to base this TagTypeTag off of.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TagTypeTag.For(FreneticScript.TagHandlers.TagData,System.String)">
            <summary>
            Returns the type of this tag.
            </summary>
            <param name="data">The data.</param>
            <param name="input">The input text.</param>
            <returns>A TagTypeTag, or null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TagTypeTag.For(FreneticScript.TagHandlers.TagData,FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Returns the type of this tag.
            </summary>
            <param name="data">The data.</param>
            <param name="input">The input object.</param>
            <returns>A TagTypeTag, or null.</returns>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.TagTypeTag.Handlers">
            <summary>
            All tag handlers for this tag type.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TagTypeTag.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TagTypeTag.ToString">
            <summary>
            Returns the name of the tag type.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.Objects.TextTag">
            <summary>
            Represents text as a usable tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.TextTag.Text">
            <summary>
            The text this TextTag represents.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TextTag.#ctor(System.String)">
            <summary>
            Constructs a text tag.
            </summary>
            <param name="_text">The text to construct it from.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TextTag.For(FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Converts a template object to a text tag.
            </summary>
            <param name="text">The text input.</param>
            <returns>A valid text tag.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TextTag.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TextTag.ToString">
            <summary>
            Converts the text tag to a string by returning the internal text.
            </summary>
            <returns>A string representation of this text tag.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TextTag.Set(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Sets a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to set it to.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TextTag.Add(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Adds a value to a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to add.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.Objects.BooleanTag">
            <summary>
            Represents a true or false as a usable tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.BooleanTag.Internal">
            <summary>
            The boolean this tag represents.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BooleanTag.For(FreneticScript.TagHandlers.TagData,System.String)">
            <summary>
            Get a boolean tag relevant to the specified input, erroring on the command system if invalid input is given (Returns false in that case).
            Never null!
            </summary>
            <param name="dat">The TagData used to construct this BooleanTag.</param>
            <param name="input">The input text to create a boolean from.</param>
            <returns>The boolean tag.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BooleanTag.For(FreneticScript.TagHandlers.TagData,FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Get a boolean tag relevant to the specified input, erroring on the command system if invalid input is given (Returns false in that case).
            Never null!
            </summary>
            <param name="dat">The TagData used to construct this BooleanTag.</param>
            <param name="input">The input to create or get a boolean from.</param>
            <returns>The boolean tag.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BooleanTag.TryFor(System.String)">
            <summary>
            Tries to return a valid boolean, or null.
            </summary>
            <param name="input">The input that is potentially a boolean.</param>
            <returns>A boolean, or null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BooleanTag.TryFor(FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Tries to return a valid boolean, or null.
            </summary>
            <param name="input">The input that is potentially a boolean.</param>
            <returns>A boolean, or null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BooleanTag.#ctor(System.Boolean)">
            <summary>
            Constructs a boolean tag.
            </summary>
            <param name="_val">The internal boolean to use.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BooleanTag.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.BooleanTag.ToString">
            <summary>
            Returns the a string representation of the boolean internally stored by this boolean tag. IE, this returns "true" or "false".
            </summary>
            <returns>A string representation of the boolean.</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.Objects.TimeTag">
            <summary>
            Represents a date-time as a usable tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Objects.TimeTag.Internal">
            <summary>
            The DateTime this TimeTag represents.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TimeTag.For(System.String)">
            <summary>
            Get a time tag relevant to the specified input, erroring on the command system if invalid input is given (Returns null in that case!)
            </summary>
            <param name="input">The input text to create a time from.</param>
            <returns>The time tag, or null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TimeTag.For(FreneticScript.TagHandlers.TagData,FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Get a time tag relevant to the specified input, erroring on the command system if invalid input is given (Returns null in that case!)
            </summary>
            <param name="data">The relevant tag data, if any.</param>
            <param name="input">The input to create a time from.</param>
            <returns>The time tag, or null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TimeTag.For(FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Get a time tag relevant to the specified input, erroring on the command system if invalid input is given (Returns null in that case!)
            </summary>
            <param name="input">The input to create a time from.</param>
            <returns>The time tag, or null.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TimeTag.#ctor(System.DateTimeOffset)">
            <summary>
            Constructs a time tag.
            </summary>
            <param name="_time">The internal date-time to use.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TimeTag.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.Objects.TimeTag.ToString">
            <summary>
            Returns the a string representation of the date-time internally stored by this time tag.
            </summary>
            <returns>A string representation of the date-time.</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.TagBit">
            <summary>
            Part of a tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagBit.Key">
            <summary>
            The main portion of the tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagBit.Variable">
            <summary>
            The [Modifier] portion of a tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagBit.OVar">
            <summary>
            The original input variable. (For use with compiled data).
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagBit.Handler">
            <summary>
            The handler that could handle this tag, if any is available.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagBit.ToString">
            <summary>
            Returns the tag bit as tag input text.
            </summary>
            <returns>The tag input text.</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.TagData">
            <summary>
            A tag information container.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagData.mode">
            <summary>
            What debug mode to use while filling tags.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagData.cInd">
            <summary>
            The current index in this tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagData.InputKeys">
            <summary>
            The tag's current simplified input data.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagData.Fallback">
            <summary>
            What to be returned if the tag fills null.
            </summary>
        </member>
        <member name="P:FreneticScript.TagHandlers.TagData.HasFallback">
            <summary>
            Whether this tag has an alternate response if it fills null.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagData.Variables">
            <summary>
            All variables waiting in this tag's context.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagData.TagSystem">
            <summary>
            The tag system this tag data is used for.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagData.BaseColor">
            <summary>
            The 'base color' set by the tag requesting code.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagData.Error">
            <summary>
            What to invoke if there is an error. Given string contains valid tags - any user input should be escaped!
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagData.CSE">
            <summary>
            The relevant command stack entry, if any.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagData.#ctor(FreneticScript.TagHandlers.TagParser,FreneticScript.TagHandlers.TagBit[],System.String,System.Collections.Generic.Dictionary{System.String,FreneticScript.CommandSystem.ObjectHolder},FreneticScript.CommandSystem.DebugMode,System.Action{System.String},FreneticScript.CommandSystem.Arguments.Argument,FreneticScript.CommandSystem.CommandStackEntry)">
            <summary>
            Constructs the tag information container.
            </summary>
            <param name="_system">The command system to use.</param>
            <param name="_input">The input tag pieces.</param>
            <param name="_basecolor">The default color to use for output.</param>
            <param name="_vars">Any variables involved in the queue.</param>
            <param name="_mode">What debug mode to use.</param>
            <param name="_error">What to invoke if there is an error.</param>
            <param name="fallback">What to fall back to if the tag returns null.</param>
            <param name="_cse">The relevant command stack entry, if any.</param>
        </member>
        <member name="P:FreneticScript.TagHandlers.TagData.Item(System.Int32)">
            <summary>
            Gets the key at a specified index.
            </summary>
            <param name="ind">The index.</param>
            <returns>The key.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagData.Shrink">
            <summary>
            Shrinks the data amount by one at the start, and returns itself.
            </summary>
            <returns>This object.</returns>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagData.Remaining">
            <summary>
            How many tag positions are left.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagData.GetModifier(System.Int32)">
            <summary>
            Gets the modifier at a specified place, handling any tags within - returning a string.
            </summary>
            <param name="place">What place to get a modifier from.</param>
            <returns>The tag-parsed modifier as a string.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagData.GetModifierObject(System.Int32)">
            <summary>
            Gets the modifier at a specified place, handling any tags within.
            </summary>
            <param name="place">What place to get a modifier from.</param>
            <returns>The tag-parsed modifier.</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.TagParser">
            <summary>
            The master class for parsing tags.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.CommandSystem">
            <summary>
            The command system that made this tag system.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagParser.Escape(System.String)">
            <summary>
            Escapes any tags inside a string.
            </summary>
            <param name="input">The string that may have tags.</param>
            <returns>An escaped string.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagParser.Unescape(System.String)">
            <summary>
            Reverses any tag escaping inside a string.
            </summary>
            <param name="input">The string that was escaped.</param>
            <returns>An unescaped string that may have tags.</returns>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Handlers">
            <summary>
            All tag handler objects currently registered.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Types">
            <summary>
            All tag types currently registered.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagParser.Register(FreneticScript.TagHandlers.TemplateTagBase)">
            <summary>
            Registers a handler object for later usage by tags.
            </summary>
            <param name="handler">The handler object to register.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagParser.Register(FreneticScript.TagHandlers.TagType)">
            <summary>
            Registers a type object for later usage by tags.
            </summary>
            <param name="type">The type object to register.</param>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.LVar">
            <summary>
            Local variable tag base.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagParser.Init(FreneticScript.CommandSystem.Commands)">
            <summary>
            Prepares the tag system.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagParser.PostInit">
            <summary>
            Set up the tag engine after all input has be registered.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Type_Binary">
            <summary>
            The BinaryTag type.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Type_Boolean">
            <summary>
            The BooleanTag type.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Type_Integer">
            <summary>
            The IntegerTag type.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Type_List">
            <summary>
            The ListTag type.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Type_Map">
            <summary>
            The MapTag type.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Type_Null">
            <summary>
            The NullTag type.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Type_Number">
            <summary>
            The NumberTag type.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Type_TagType">
            <summary>
            The TagTypeTag type.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Type_Text">
            <summary>
            The TextTag type.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagParser.Type_Time">
            <summary>
            The TimeTag type.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagParser.SplitToArgument(System.String,System.Boolean)">
            <summary>
            Splits text into an Argument, for preparsing.
            </summary>
            <param name="input">The original text.</param>
            <param name="wasquoted">Whether the argument was input with "quotes".</param>
            <returns>The parsed Argument.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagParser.ParseTags(FreneticScript.CommandSystem.Arguments.TagArgumentBit,System.String,System.Collections.Generic.Dictionary{System.String,FreneticScript.CommandSystem.ObjectHolder},FreneticScript.CommandSystem.DebugMode,System.Action{System.String},FreneticScript.CommandSystem.CommandStackEntry)">
            <summary>
            Reads and parses all tags inside a list of tag bits.
            </summary>
            <param name="base_color">The base color for tags to use.</param>
            <param name="vars">Any variables in this tag's context.</param>
            <param name="bits">The tag data.</param>
            <param name="mode">What debugmode to use.</param>
            <param name="error">What to invoke if there's an error.</param>
            <param name="cse">The relevant command stack entry, if any.</param>
            <returns>The string with tags parsed.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagParser.ParseTagsFromText(System.String,System.String,System.Collections.Generic.Dictionary{System.String,FreneticScript.CommandSystem.ObjectHolder},FreneticScript.CommandSystem.DebugMode,System.Action{System.String},System.Boolean)">
            <summary>
            Reads and parses all tags inside a string. Note: Avoid this where possible. Use SplitToArgument instead!
            </summary>
            <param name="base_color">The base color for tags to use.</param>
            <param name="vars">Any variables in this tag's context.</param>
            <param name="input">The tagged string.</param>
            <param name="mode">What debugmode to use.</param>
            <param name="error">What to invoke if there's an error.</param>
            <param name="wasquoted">Whether the input had "quotes".</param>
            <returns>The string with tags parsed.</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.TagSubHandler">
            <summary>
            Represents a tag's handler, within the tag type.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagSubHandler.Handle">
            <summary>
            This function should take the input and output the result of the tag handling.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagSubHandler.ReturnType">
            <summary>
            What type this returns as. Null means dynamic return.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagSubHandler.ReturnTypeString">
            <summary>
            What type this returns as. Specify null for dynamic return.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagSubHandler.IsNullTyped">
            <summary>
            Whether this tag is for null checks.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagSubHandler.Duplicate">
            <summary>
            Returns a perfect duplicate of this tag sub-handler.
            </summary>
            <returns>The duplicate.</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.TagType">
            <summary>
            Represents the specific type of a tag.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagType.TypeName">
            <summary>
            The name of this tag type, lowercase.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagType.SubTypeName">
            <summary>
            The name of the type upon which this tag type is based.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagType.SubType">
            <summary>
            The type upon which this tag type is based.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagType.TypeGetter">
            <summary>
            This function should take the two inputs and return a valid object of the relevant type.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagType.SubHandlers">
            <summary>
            The tag sub-handler for all possible tags.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TagType.GetNextTypeDown">
            <summary>
            Gets the boject of the next type down the tree of types.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TagType.Duplicate">
            <summary>
            Duplicates a tag type object.
            </summary>
            <returns>The new duplicate.</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.TemplateObject">
            <summary>
            The abstract base for a tag object.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TemplateObject.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.TemplateObject.Basic_For(FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Returns the input as-is, for use with ObjecTypes.
            </summary>
            <param name="obj">The object input.</param>
            <returns>The object input.</returns>
        </member>
        <member name="M:FreneticScript.TagHandlers.TemplateObject.Set(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Sets a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to set it to.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.TemplateObject.Add(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Adds a value to a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to add.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.TemplateObject.Subtract(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Subtracts a value from a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to subtract.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.TemplateObject.Multiply(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Multiplies a value by a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to multiply.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.TemplateObject.Divide(System.String[],FreneticScript.TagHandlers.TemplateObject)">
            <summary>
            Divides a value from a value on the object.
            </summary>
            <param name="names">The name of the value.</param>
            <param name="val">The value to divide.</param>
        </member>
        <member name="T:FreneticScript.TagHandlers.TemplateTagBase">
            <summary>
            An abstract class, implementations are used as tag bases.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TemplateTagBase.Name">
            <summary>
            The name of the tag base.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TemplateTagBase.CanSingle">
            <summary>
            TEMPORARY. // TODO: REMOVE ME!
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TemplateTagBase.ResultType">
            <summary>
            What type this tag handler will return. Null for dynamic.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.TemplateTagBase.ResultTypeString">
            <summary>
            The name of the type this tag handler will return. Null for dynamic.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.TemplateTagBase.HandleOne(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.TemplateTagBase.Handle(FreneticScript.TagHandlers.TagData)">
            <summary>
            Parse any direct tag input values.
            </summary>
            <param name="data">The input tag data.</param>
        </member>
        <member name="M:FreneticScript.TagHandlers.TemplateTagBase.ToString">
            <summary>
            Usually returns the name of this tag base.
            </summary>
            <returns>The name of this tag base.</returns>
        </member>
        <member name="T:FreneticScript.TagHandlers.Variable">
            <summary>
            Holds a name:value pair.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Variable.Name">
            <summary>
            The name of the variable.
            </summary>
        </member>
        <member name="F:FreneticScript.TagHandlers.Variable.Value">
            <summary>
            The value of the variable.
            </summary>
        </member>
        <member name="M:FreneticScript.TagHandlers.Variable.#ctor(System.String,System.String)">
            <summary>
            Constructs a variable.
            </summary>
            <param name="_name">See Variable.Name.</param>
            <param name="_value">See Variable.Value.</param>
        </member>
        <member name="T:FreneticScript.TextStyle">
            <summary>
            Holds all text styles to be used... replace these with your engine's color tag system.
            The FreneticScript core uses these where needed, particularly in the ColorTags class.
            </summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Default">
            <summary>Default style: ^r^7</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Reset">
            <summary>Reset style: ^r</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Bold">
            <summary>Bold style: ^b</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Italic">
            <summary>Italic style: ^i</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Transparent">
            <summary>Transparent style: ^t</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Opaque">
            <summary>Opaque style: ^o</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.White">
            <summary>White color: ^7</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Color_Simple">
            <summary>Simple style: ^r^7</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Color_Standout">
            <summary>Standout style: ^r^0^h^5</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Color_Readable">
            <summary>Readable style: ^r^7^e^0^b</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Color_Chat">
            <summary>Chat style: ^r^2^d</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Color_Error">
            <summary>Error style: ^r^0^h^3</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Color_Warning">
            <summary>Warning style: ^r^0^h^1</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Color_Commandhelp">
            <summary>Commandhelp style: ^r^0^h^1</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Color_Separate">
            <summary>Separate style: ^r^5</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Color_Outgood">
            <summary>Good output style: ^r^2</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Color_Outbad">
            <summary>Bad output style: ^r^1</summary>
        </member>
        <member name="F:FreneticScript.TextStyle.Color_Importantinfo">
            <summary>Important information style: ^r^3</summary>
        </member>
    </members>
</doc>
